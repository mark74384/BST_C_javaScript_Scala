[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@6339e604, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/src/main/scala/Main.scala","languageId":"scala","version":1,"text":"\r\nobject Main extends App {\r\n  var fruit : FruitBST = new FruitBST()\r\n  fruit.insert(new Apple())\r\n  fruit.insert(new Orange())\r\n  fruit.insert(new Figs())\r\n  fruit.insert(new Pear())\r\n  fruit.insert(new Peaches())\r\n  fruit.insert(new Mango())\r\n  fruit.insert(new Guava())\r\n  fruit.insert(new Grapes())\r\n  fruit.insert(new Blackberries())\r\n  fruit.insert(new Banana())\r\n  fruit.insert(new Blueberries())\r\n  fruit.insert(new Watermelon())\r\n  fruit.insert(new Avocado())\r\n  fruit.insert(new Apple())\r\n\r\n\r\n  //************************************************************\\\\\r\n  fruit.iterate()\r\n  println(\"===================================\\n\")\r\n\r\n  //************************************************************\\\\\r\n  fruit.findHeaviest();\r\n  println(\"===================================\\n\")\r\n\r\n  //************************************************************\\\\\r\n  fruit.findLightest()\r\n  println(\"===================================\\n\")\r\n  \r\n  //************************************************************\\\\\r\n  fruit.magnifyByType(\"Avocado\",200)\r\n  fruit.iterate()\r\n  println(\"===================================\\n\")\r\n\r\n   //***********************************************************\\\\\r\n  fruit.filterByType(\"Apple\")\r\n  println(\"===================================\\n\")\r\n\r\n  //************************************************************\\\\\r\n  fruit.filterByWeight(330)\r\n  println(\"===================================\\n\")\r\n  \r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/src/main/scala/Tree.scala","languageId":"scala","version":1,"text":"import scala.collection.mutable.ListBuffer\r\ntrait FruitTree{\r\n    def insert(nodeFruit: Fruit) : FruitTree\r\n    def iterate();\r\n    def InOrder(function:FruitTree => Unit);\r\n    def filterByType(fruitType:String);\r\n    def filterByWeight(fruitWeight:Int);\r\n    //def DeleteMagnifyByType(fruitType: String, fruitWeight: Int):ListBuffer[Fruit];\r\n    def findHeaviest();\r\n    def findLightest();\r\n}\r\n\r\ncase object EmptyTree extends FruitTree{\r\n\r\n  override def InOrder(function: FruitTree => Unit): Unit = {}\r\n\r\n  override def filterByWeight(fruitWeight: Int): Unit = {}\r\n\r\n  override def findHeaviest(): Unit = {println(\"Empty tree\")}\r\n\r\n  override def findLightest(): Unit = {println(\"Empty tree\")}\r\n\r\n  override def filterByType(fruitType: String): Unit = {}\r\n\r\n  override def iterate(): Unit = {}\r\n\r\n  override def insert(nodeFruit: Fruit): FruitTree = TreeNode (nodeFruit,EmptyTree,EmptyTree)\r\n}\r\n\r\ncase class TreeNode (var nodeFruit : Fruit,var left : FruitTree , var right : FruitTree) extends FruitTree {\r\n\r\n  override def InOrder(function: FruitTree => Unit): Unit = {\r\n    this.left.InOrder(function);\r\n    function(this);\r\n    this.right.InOrder(function);\r\n  }\r\n\r\n  override def filterByWeight(fruitWeight: Int): Unit = {\r\n    def filterByWeight(treeNode : FruitTree) {\r\n        treeNode match {\r\n          case TreeNode(data,_,right) if (data.weight < fruitWeight) => filterByWeight(right);\r\n          case TreeNode(data,left,right) if (data.weight >= fruitWeight) => {\r\n            filterByWeight(left);\r\n            println(\"Type = \"+data.fruitType +\", Weight = \"+ data.weight);\r\n            filterByWeight(right);\r\n          }\r\n          case EmptyTree => treeNode.filterByWeight(fruitWeight);\r\n      }\r\n    }\r\n    filterByWeight(this);\r\n  }\r\n\r\n  def printNode(treeNode:TreeNode){\r\n    println(\"Type = \"+treeNode.asInstanceOf[TreeNode].nodeFruit.fruitType +\", Weight = \"+ treeNode.asInstanceOf[TreeNode].nodeFruit.weight)\r\n  }\r\n  \r\n  override def findHeaviest(){\r\n    def findHeaviest(treeNode : FruitTree){\r\n      treeNode match {\r\n        case TreeNode(_, _, right) => {\r\n          right match {\r\n            case TreeNode(_, _, _) => findHeaviest(right);\r\n            case EmptyTree => printNode(treeNode.asInstanceOf[TreeNode]);\r\n          }\r\n        }\r\n        case EmptyTree => treeNode.findHeaviest();\r\n      }\r\n    }\r\n    findHeaviest(this);\r\n  }\r\n\r\n  override def findLightest() {\r\n    def findLightest(treeNode : FruitTree) {\r\n      treeNode match {\r\n        case TreeNode(_,left, _) => {\r\n          left match {\r\n            case TreeNode(_,_, _) => findLightest(left);\r\n            case EmptyTree => printNode(treeNode.asInstanceOf[TreeNode]);\r\n          }\r\n        }\r\n        case EmptyTree => treeNode.findLightest();\r\n      }\r\n    }\r\n    findLightest(this);\r\n  }\r\n\r\n\r\n  override def filterByType(fruitType: String): Unit = {\r\n    InOrder((treeNode:FruitTree)=>{\r\n      if (treeNode.asInstanceOf[TreeNode].nodeFruit.fruitType.equals(fruitType))\r\n        printNode(treeNode.asInstanceOf[TreeNode]);\r\n    });\r\n  }\r\n\r\n\r\n  override def iterate(): Unit = {\r\n    InOrder((treeNode:FruitTree)=>{\r\n      printNode(treeNode.asInstanceOf[TreeNode]);\r\n    });\r\n  }\r\n\r\n\r\n  override def insert(nodeFruit: Fruit): FruitTree = {\r\n      def insert(t:FruitTree,nodeFruit:Fruit):FruitTree = t match {\r\n          case TreeNode(data,left, right) if (data.weight >= nodeFruit.weight) => TreeNode(data,insert(left,nodeFruit),right);\r\n          case TreeNode(data,left, right) if (data.weight < nodeFruit.weight) => TreeNode(data,left,insert(right,nodeFruit));\r\n          case EmptyTree => t.insert(nodeFruit);\r\n          case _ => t\r\n      }\r\n      insert(this,nodeFruit)\r\n  }\r\n\r\n\r\n\r\n    /*override def DeleteMagnifyByType(fruitType: String, fruitWeight: Int): ListBuffer[Fruit] = {\r\n    var list = new ListBuffer[Fruit]();\r\n    /*def handleMagnifiedNode(treeNode:FruitTree,parent:FruitTree) {\r\n        treeNode match {\r\n        case TreeNode(nodeFruit,left, right) => {\r\n          right match {\r\n            case TreeNode(nodeFruit2, _, _) => {\r\n              right.asInstanceOf[TreeNode].nodeFruit = nodeFruit;\r\n              treeNode.asInstanceOf[TreeNode].nodeFruit = nodeFruit2;\r\n              handleMagnifiedNode(right,treeNode);\r\n            }\r\n            case EmptyTree => {\r\n              parent match {\r\n                case TreeNode(_, _, _) => {\r\n                  parent.asInstanceOf[TreeNode].right = left;\r\n                  //insert nodeFruit to the tree\r\n                  //root.asInstanceOf[TreeNode] = root.insert(nodeFruit);\r\n                }\r\n                case EmptyTree => {}\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    list.addAll(this.left.DeleteMagnifyByType(fruitType,fruitWeight));\r\n    list.addAll(this.right.DeleteMagnifyByType(fruitType,fruitWeight));\r\n    if (nodeFruit.fruitType.equals(fruitType)){\r\n      nodeFruit.weight += fruitWeight;\r\n      list.addOne(nodeFruit);\r\n      handleMagnifiedNode(this,EmptyTree);\r\n    }*/\r\n    list;\r\n  }*/\r\n\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\ahmed\git\BST_C-_JavaScript_Scala\MainProjects\scala-project\target\scala-2.13\zinc\inc_compile_2.13.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Jun 17, 2021, 8:18:28 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
