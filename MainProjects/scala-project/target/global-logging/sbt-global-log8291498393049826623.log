[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@5876bed9, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/src/main/scala/FruitBST.scala","languageId":"scala","version":1,"text":"import scala.collection.mutable.ListBuffer\r\nclass FruitBST {\r\n  var root:FruitTree = EmptyTree;\r\n\r\n   def insert(nodeFruit: Fruit) = {\r\n    root = root.insert(nodeFruit);\r\n  }\r\n\r\n  def iterate(){\r\n    root.iterate();\r\n  }\r\n\r\n  def filterByType(fruitType: String){\r\n    root.filterByType(fruitType);\r\n  }\r\n\r\n  def filterByWeight(fruitWeight: Int){\r\n    root.filterByWeight(fruitWeight);\r\n  }\r\n\r\n  def magnifyByType(fruitType: String, fruitWeight: Int){\r\n    for (e <- DeleteMagnifyByType(fruitType,fruitWeight,root)) insert(e);\r\n  }\r\n  private def DeleteMagnifyByType(fruitType: String, fruitWeight: Int,nodeTree :FruitTree): ListBuffer[Fruit] = {\r\n    var list = new ListBuffer[Fruit]();\r\n    nodeTree match {\r\n        case TreeNode(nodeFruit,left, right) => {\r\n            list.addAll(DeleteMagnifyByType(fruitType,fruitWeight,left));\r\n            list.addAll(DeleteMagnifyByType(fruitType,fruitWeight,right));\r\n            if (nodeFruit.fruitType.equals(fruitType)){\r\n                deleteTreeNode(nodeTree);\r\n                nodeFruit.weight += fruitWeight;\r\n                list.addOne(nodeFruit);\r\n            }\r\n        }\r\n        case EmptyTree => {}\r\n    }\r\n    list;\r\n  }\r\n  def deleteTreeNode(treeNode:FruitTree){\r\n    def setLeft(treeNode:FruitTree) : FruitTree = {\r\n      treeNode match {\r\n        case TreeNode(_,left,_) =>{\r\n          left match {\r\n            case TreeNode(_, _, _) => setLeft(left);\r\n            case EmptyTree => treeNode;\r\n          }\r\n          \r\n        }\r\n        case EmptyTree => {treeNode};\r\n      }\r\n    }\r\n    def Successor(treeNode:FruitTree):FruitTree = {\r\n      treeNode match {\r\n        case TreeNode(_,_,right)=>{\r\n          setLeft(right);\r\n        }\r\n        case EmptyTree => EmptyTree\r\n      }\r\n    }\r\n    treeNode match {\r\n      case TreeNode(_,_,_) => {\r\n        val successor:FruitTree = Successor(treeNode);\r\n        successor match {\r\n          case TreeNode(_,_,_) => {\r\n            treeNode.asInstanceOf[TreeNode].nodeFruit = successor.asInstanceOf[TreeNode].nodeFruit;\r\n            deleteNodeFromParent(successor);\r\n          }\r\n          case EmptyTree => {\r\n            deleteNodeFromParent(treeNode)\r\n          }\r\n        }\r\n      }\r\n      case _ =>{}\r\n    }\r\n    def deleteNodeFromParent(nodeTree:FruitTree){\r\n      val p : FruitTree = getParent(nodeTree,root);\r\n      p match {\r\n        case TreeNode(nodeFruit, left, _) =>{\r\n          if (left.equals(treeNode)){\r\n            p.asInstanceOf[TreeNode].left = EmptyTree;\r\n          }else{\r\n            p.asInstanceOf[TreeNode].right = EmptyTree;\r\n          } \r\n        }\r\n        case EmptyTree => {\r\n          root match {\r\n            case TreeNode(_, left, right) => {\r\n              left match {\r\n                case TreeNode(_, _, right) => {}\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n      \r\n  }\r\n  /*def Successor(nodeTree:FruitTree):FruitTree = {\r\n    var temp:FruitTree= nodeTree;\r\n    temp match {\r\n      case TreeNode(_,_,_,right)=>{\r\n        temp = right;\r\n        def setLeft(){\r\n          temp match {\r\n            case TreeNode(_,_,left,_) =>{\r\n              temp = left;\r\n              setLeft();\r\n            }\r\n            case EmptyTree => {};\r\n          }\r\n        }\r\n      }\r\n    }\r\n    temp;\r\n  }*/\r\n  def getParent(treeNode:FruitTree,root:FruitTree):FruitTree = {\r\n    root match {\r\n      case TreeNode(_, left, right) if(left.equals(treeNode)||right.equals(treeNode)) => {\r\n        root;\r\n      }\r\n      case TreeNode(_, left, right) => {\r\n        val t = getParent(treeNode,left);\r\n        t match {\r\n          case TreeNode(nodeFruit, left, right) => {t}\r\n          case EmptyTree => {getParent(treeNode,right)}\r\n        }\r\n      }\r\n      case EmptyTree => {EmptyTree}\r\n    }\r\n  }\r\n  /*private def deleteNode(treeNode:FruitTree,parent:FruitTree){\r\n        /*treeNode match {\r\n        case TreeNode(nodeFruit,left, right) => {\r\n          right match {\r\n            case TreeNode(nodeFruit2, _, _) => {\r\n              right.asInstanceOf[TreeNode].nodeFruit = nodeFruit;\r\n              treeNode.asInstanceOf[TreeNode].nodeFruit = nodeFruit2;\r\n              deleteNode(right,treeNode);\r\n            }\r\n            case EmptyTree => {\r\n              parent match {\r\n                case TreeNode(_, _, _) => {\r\n                  parent.asInstanceOf[TreeNode].right = left;\r\n                }\r\n                case EmptyTree => {\r\n                    root = left;\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }*/\r\n  }*/\r\n\r\n  def findHeaviest(): FruitTree = {\r\n    root.findHeaviest();\r\n  }\r\n\r\n  def findLightest(): FruitTree = {\r\n    root.findLightest();\r\n  }\r\n\r\n}\r\n\r\n\r\n/*class FruitBST () {\r\n    var root : Node = null;\r\n    def insert( NodeFruit : Fruit ){\r\n        if (root == null){\r\n            root = new Node(NodeFruit);\r\n        }else{\r\n            var temp : Node = root;\r\n            var check : Boolean = true\r\n            while (check){\r\n                if (temp.element.weight < NodeFruit.weight){\r\n                    if (temp.RightNode == null){\r\n                        temp.RightNode = new Node(NodeFruit);\r\n                        check = false;\r\n                    }\r\n                    else\r\n                        temp = temp.RightNode;\r\n                }\r\n                else{\r\n                    if (temp.LeftNode == null){\r\n                        temp.LeftNode = new Node(NodeFruit);\r\n                        check = false;\r\n                    }\r\n                    else\r\n                        temp = temp.LeftNode;\r\n                }\r\n            }\r\n        }\r\n    }*/\r\n    /*def delete(NodeFruit : Fruit):(Boolean)={\r\n        var temp:Node = root;\r\n        var parent:Node = null;\r\n        while (temp!=null){\r\n            if (temp.element.weight < NodeFruit.weight){\r\n                temp = temp.RightNode;\r\n            }else if (temp.element.weight > NodeFruit.weight){\r\n                temp = temp.LeftNode;\r\n            }\r\n            else{\r\n                if (temp.RightNode != null){\r\n\r\n                }\r\n                else {\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n        return false;\r\n    }*/\r\n   /* def printBST(temp : Node){\r\n        if (temp!=null){\r\n            printBST(temp.LeftNode);\r\n            printBST(temp.RightNode);\r\n            println(temp.element.weight);\r\n        }\r\n    }\r\n}\r\nclass Node(NodeFruit : Fruit){\r\n    var element : Fruit = NodeFruit;\r\n    var RightNode : Node = null;\r\n    var LeftNode : Node = null;\r\n}*/"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/src/main/scala/Main.scala","languageId":"scala","version":34,"text":"\r\nobject Main extends App {\r\n  def map (def f ,list){\r\n    \r\n  }\r\n\r\n  /*var fruit : FruitBST = new FruitBST();\r\n  fruit.insert(new Apple());\r\n  fruit.insert(new Blueberries());\r\n  fruit.insert(new Blackberries());\r\n  fruit.insert(new Avocado());\r\n  fruit.insert(new Apple());\r\n  fruit.filterByType(\"Apple\");\r\n  println(\"--------------------------------\");\r\n  fruit.iterate();\r\n  fruit.magnifyByType(\"Avocado\",200);\r\n  println(\"--------------------------------\");\r\n  fruit.iterate();\r\n  println(\"--------------------------------\");\r\n  fruit.filterByType(\"Apple\")\r\n  println(\"--------------------------------\");\r\n  fruit.filterByWeight(330);\r\n  println(\"--------------------------------\");\r\n  fruit.iterate();*/\r\n\r\n  /*var bst : FruitTree = new TreeNode(new Apple(),EmptyTree,EmptyTree);\r\n  bst = bst.insert(new Blueberries());\r\n  bst = bst.insert(new Blackberries());\r\n  bst = bst.insert(new Avocado());\r\n  bst = bst.insert(new Apple());\r\n // bst.mfilterByType(\"Apple\");\r\n  //bst.filterByType(\"Apple\");\r\n  //bst.iterate();\r\n  //println(\"--------------------------------\")\r\n  //bst.filterByWeight(20);\r\n  //println(\"--------------------------------\")\r\n  bst.magnifyByType(\"Avocado\",200);\r\n  bst.findHeaviest().iterate();\r\n  println(\"--------------------------------\")\r\n  //println(bst.findLightest().iterate());\r\n  //println(\"--------------------------------\")\r\n  bst.iterate();*/\r\n  //var tr: TreeNode = new TreeNode(new Avocado(),EmptyTree,EmptyTree)\r\n}"}})[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\ahmed\git\BST_C-_JavaScript_Scala\MainProjects\scala-project\target\scala-2.13\zinc\inc_compile_2.13.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Jun 10, 2021, 12:03:44 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/src/main/scala/Tree.scala","languageId":"scala","version":1,"text":"import scala.collection.mutable.ListBuffer\r\ntrait FruitTree{\r\n    def insert(nodeFruit: Fruit) : FruitTree\r\n    def iterate();\r\n    def InOrder(function:FruitTree => Unit);\r\n    def filterByType(fruitType:String);\r\n    def filterByWeight(fruitWeight:Int);\r\n    //def DeleteMagnifyByType(fruitType: String, fruitWeight: Int):ListBuffer[Fruit];\r\n    def findHeaviest():FruitTree;\r\n    def findLightest():FruitTree;\r\n}\r\n\r\ncase object EmptyTree extends FruitTree{\r\n\r\n  /*override def DeleteMagnifyByType(fruitType: String, fruitWeight: Int): ListBuffer[Fruit] = {\r\n    new ListBuffer();\r\n  }*/\r\n\r\n  override def InOrder(function: FruitTree => Unit): Unit = {}\r\n\r\n  override def filterByWeight(fruitWeight: Int): Unit = {}\r\n\r\n  override def findHeaviest(): FruitTree = EmptyTree\r\n\r\n  override def findLightest(): FruitTree = EmptyTree\r\n\r\n  override def filterByType(fruitType: String): Unit = {}\r\n\r\n  override def iterate(): Unit = {}\r\n\r\n  override def insert(nodeFruit: Fruit): FruitTree = TreeNode (nodeFruit,EmptyTree,EmptyTree)\r\n}\r\n\r\ncase class TreeNode (var nodeFruit : Fruit,var left : FruitTree , var right : FruitTree) extends FruitTree {\r\n\r\n  /*override def DeleteMagnifyByType(fruitType: String, fruitWeight: Int): ListBuffer[Fruit] = {\r\n    var list = new ListBuffer[Fruit]();\r\n    /*def handleMagnifiedNode(treeNode:FruitTree,parent:FruitTree) {\r\n        treeNode match {\r\n        case TreeNode(nodeFruit,left, right) => {\r\n          right match {\r\n            case TreeNode(nodeFruit2, _, _) => {\r\n              right.asInstanceOf[TreeNode].nodeFruit = nodeFruit;\r\n              treeNode.asInstanceOf[TreeNode].nodeFruit = nodeFruit2;\r\n              handleMagnifiedNode(right,treeNode);\r\n            }\r\n            case EmptyTree => {\r\n              parent match {\r\n                case TreeNode(_, _, _) => {\r\n                  parent.asInstanceOf[TreeNode].right = left;\r\n                  //insert nodeFruit to the tree\r\n                  //root.asInstanceOf[TreeNode] = root.insert(nodeFruit);\r\n                }\r\n                case EmptyTree => {}\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    list.addAll(this.left.DeleteMagnifyByType(fruitType,fruitWeight));\r\n    list.addAll(this.right.DeleteMagnifyByType(fruitType,fruitWeight));\r\n    if (nodeFruit.fruitType.equals(fruitType)){\r\n      nodeFruit.weight += fruitWeight;\r\n      list.addOne(nodeFruit);\r\n      handleMagnifiedNode(this,EmptyTree);\r\n    }*/\r\n    list;\r\n  }*/\r\n\r\n\r\n\r\n\r\n  override def InOrder(function: FruitTree => Unit): Unit = {\r\n    this.left.InOrder(function);\r\n    function(this);\r\n    this.right.InOrder(function);\r\n  }\r\n\r\n\r\n  override def filterByWeight(fruitWeight: Int): Unit = {\r\n    /*InOrder((treeNode:FruitTree)=>{\r\n      if (treeNode.asInstanceOf[TreeNode].nodeFruit.weight >= fruitWeight)\r\n        printNode(treeNode.asInstanceOf[TreeNode]);\r\n    });*/\r\n    def filterByWeight(treeNode : FruitTree) {\r\n        treeNode match {\r\n          case TreeNode(data,_,right) if (data.weight < fruitWeight) => filterByWeight(right);\r\n          case TreeNode(data,left,right) if (data.weight >= fruitWeight) => {\r\n            filterByWeight(left);\r\n            println(\"Type = \"+data.fruitType +\", Weight = \"+ data.weight);\r\n            filterByWeight(right);\r\n          }\r\n          case EmptyTree => treeNode.filterByWeight(fruitWeight);\r\n      }\r\n    }\r\n    filterByWeight(this);\r\n  }\r\n  def printNode(treeNode:TreeNode){\r\n    println(\"Type = \"+treeNode.asInstanceOf[TreeNode].nodeFruit.fruitType +\", Weight = \"+ treeNode.asInstanceOf[TreeNode].nodeFruit.weight)\r\n  }\r\n  override def findHeaviest(): FruitTree = {\r\n    def findHeaviest(treeNode : FruitTree) : FruitTree = {\r\n      treeNode match {\r\n        case TreeNode(_, _, right) => {\r\n          right match {\r\n            case TreeNode(_, _, _) => findHeaviest(right);\r\n            case EmptyTree => treeNode;\r\n          }\r\n        }\r\n        case EmptyTree => treeNode.findHeaviest();\r\n      }\r\n    }\r\n    findHeaviest(this);\r\n  }\r\n\r\n  override def findLightest(): FruitTree = {\r\n    def findLightest(treeNode : FruitTree) : FruitTree = {\r\n      treeNode match {\r\n        case TreeNode(_,left, _) => {\r\n          left match {\r\n            case TreeNode(_,_, _) => findLightest(left);\r\n            case EmptyTree => treeNode;\r\n          }\r\n        }\r\n        case EmptyTree => treeNode.findLightest();\r\n      }\r\n    }\r\n    findLightest(this);\r\n  }\r\n\r\n\r\n  override def filterByType(fruitType: String): Unit = {\r\n    InOrder((treeNode:FruitTree)=>{\r\n      if (treeNode.asInstanceOf[TreeNode].nodeFruit.fruitType.equals(fruitType))\r\n        println(\"Type = \"+treeNode.asInstanceOf[TreeNode].nodeFruit.fruitType +\", Weight = \"+ treeNode.asInstanceOf[TreeNode].nodeFruit.weight)\r\n    });\r\n    /*this.left.filterByType(fruitType);\r\n    if (nodeFruit.fruitType.equals(fruitType)){\r\n      println(\"Type = \"+nodeFruit.fruitType +\", Weight = \"+ nodeFruit.weight);\r\n    }\r\n    this.right.filterByType(fruitType);*/\r\n  }\r\n\r\n\r\n  override def iterate(): Unit = {\r\n    InOrder((treeNode:FruitTree)=>{\r\n      printNode(treeNode.asInstanceOf[TreeNode]);\r\n    });\r\n  }\r\n\r\n\r\n  override def insert(nodeFruit: Fruit): FruitTree = {\r\n      def insert(t:FruitTree,nodeFruit:Fruit):FruitTree = t match {\r\n          case TreeNode(data,left, right) if (data.weight >= nodeFruit.weight) => TreeNode(data,insert(left,nodeFruit),right);\r\n          case TreeNode(data,left, right) if (data.weight < nodeFruit.weight) => TreeNode(data,left,insert(right,nodeFruit));\r\n          case EmptyTree => t.insert(nodeFruit);\r\n          case _ => t\r\n      }\r\n      insert(this,nodeFruit)\r\n      /*def insert (treeNode : FruitTree,nodeFruit : Fruit){\r\n        treeNode match {\r\n          case EmptyTree => {\r\n            treeNode.asInstanceOf = new TreeNode(nodeFruit,EmptyTree,EmptyTree);\r\n          }\r\n        }\r\n\r\n      }\r\n      EmptyTree*/\r\n  }\r\n\r\n}"}})[0m
