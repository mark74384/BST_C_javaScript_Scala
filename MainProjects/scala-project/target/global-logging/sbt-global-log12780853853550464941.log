[0m[[0m[0mdebug[0m] [0m[0m> Exec(;Test/compile; collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(Test/compile, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Test / compile[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@461b078f, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskStart, {"taskId":{"id":"538","parents":[]},"eventTime":1623103076102,"message":"Compiling scala-project","dataKind":"compile-task","data":{"target":{"uri":"file:/C:/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/#scala-project/Compile"}}})[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 1 Scala source to C:\Users\ahmed\git\BST_C-_JavaScript_Scala\MainProjects\scala-project\target\scala-2.13\classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":3,"message":"compiling 1 Scala source to C:\\Users\\ahmed\\git\\BST_C-_JavaScript_Scala\\MainProjects\\scala-project\\target\\scala-2.13\\classes ..."})[0m
[0m[[0m[33mwarn[0m] [0m[0m1 deprecation (since 2.13.0); re-run with -deprecation for details[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":2,"message":"1 deprecation (since 2.13.0); re-run with -deprecation for details"})[0m
[0m[[0m[33mwarn[0m] [0m[0mone warning found[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/logMessage, {"type":2,"message":"one warning found"})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/src/main/scala/Main.scala"},"buildTarget":{"uri":"file:/C:/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/#scala-project/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/src/main/scala/Fruit.scala"},"buildTarget":{"uri":"file:/C:/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/#scala-project/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/src/main/scala/Tree.scala"},"buildTarget":{"uri":"file:/C:/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/#scala-project/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/publishDiagnostics, {"textDocument":{"uri":"file:///C:/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/src/main/scala/FruitBST.scala"},"buildTarget":{"uri":"file:/C:/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/#scala-project/Compile"},"diagnostics":[],"reset":true})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskFinish, {"taskId":{"id":"538","parents":[]},"eventTime":1623103076271,"message":"Compiled scala-project","status":1,"dataKind":"compile-report","data":{"target":{"uri":"file:/C:/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/#scala-project/Compile"},"errors":0,"warnings":0,"time":169}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskStart, {"taskId":{"id":"539","parents":[]},"eventTime":1623103076284,"message":"Compiling scala-project-test","dataKind":"compile-task","data":{"target":{"uri":"file:/C:/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/#scala-project/Test"}}})[0m
[0m[[0m[0mdebug[0m] [0m[0mjsonRpcNotify: JsonRpcNotificationMessage(2.0, build/taskFinish, {"taskId":{"id":"539","parents":[]},"eventTime":1623103076287,"message":"Compiled scala-project-test","status":1,"dataKind":"compile-report","data":{"target":{"uri":"file:/C:/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/#scala-project/Test"},"errors":0,"warnings":0,"time":3}})[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Jun 7, 2021, 11:57:56 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: bloop.integrations.sbt.Offloader$$anon$1@6084b7c2, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (C:\Users\ahmed\git\BST_C-_JavaScript_Scala\MainProjects\scala-project\target\scala-2.13\zinc\inc_compile_2.13.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 0 s, completed Jun 7, 2021, 11:57:56 PM[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///c%3A/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/.metals/readonly/dependencies/src.zip/java.base/java/lang/Object.java","languageId":"java","version":1,"text":"/*\n * Copyright (c) 1994, 2017, Oracle and/or its affiliates. All rights reserved.\n * ORACLE PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n *\n */\n\npackage java.lang;\n\nimport jdk.internal.HotSpotIntrinsicCandidate;\n\n/**\n * Class {@code Object} is the root of the class hierarchy.\n * Every class has {@code Object} as a superclass. All objects,\n * including arrays, implement the methods of this class.\n *\n * @author  unascribed\n * @see     java.lang.Class\n * @since   1.0\n */\npublic class Object {\n\n    private static native void registerNatives();\n    static {\n        registerNatives();\n    }\n\n    /**\n     * Constructs a new object.\n     */\n    @HotSpotIntrinsicCandidate\n    public Object() {}\n\n    /**\n     * Returns the runtime class of this {@code Object}. The returned\n     * {@code Class} object is the object that is locked by {@code\n     * static synchronized} methods of the represented class.\n     *\n     * <p><b>The actual result type is {@code Class<? extends |X|>}\n     * where {@code |X|} is the erasure of the static type of the\n     * expression on which {@code getClass} is called.</b> For\n     * example, no cast is required in this code fragment:</p>\n     *\n     * <p>\n     * {@code Number n = 0;                             }<br>\n     * {@code Class<? extends Number> c = n.getClass(); }\n     * </p>\n     *\n     * @return The {@code Class} object that represents the runtime\n     *         class of this object.\n     * @jls 15.8.2 Class Literals\n     */\n    @HotSpotIntrinsicCandidate\n    public final native Class<?> getClass();\n\n    /**\n     * Returns a hash code value for the object. This method is\n     * supported for the benefit of hash tables such as those provided by\n     * {@link java.util.HashMap}.\n     * <p>\n     * The general contract of {@code hashCode} is:\n     * <ul>\n     * <li>Whenever it is invoked on the same object more than once during\n     *     an execution of a Java application, the {@code hashCode} method\n     *     must consistently return the same integer, provided no information\n     *     used in {@code equals} comparisons on the object is modified.\n     *     This integer need not remain consistent from one execution of an\n     *     application to another execution of the same application.\n     * <li>If two objects are equal according to the {@code equals(Object)}\n     *     method, then calling the {@code hashCode} method on each of\n     *     the two objects must produce the same integer result.\n     * <li>It is <em>not</em> required that if two objects are unequal\n     *     according to the {@link java.lang.Object#equals(java.lang.Object)}\n     *     method, then calling the {@code hashCode} method on each of the\n     *     two objects must produce distinct integer results.  However, the\n     *     programmer should be aware that producing distinct integer results\n     *     for unequal objects may improve the performance of hash tables.\n     * </ul>\n     * <p>\n     * As much as is reasonably practical, the hashCode method defined\n     * by class {@code Object} does return distinct integers for\n     * distinct objects. (The hashCode may or may not be implemented\n     * as some function of an object's memory address at some point\n     * in time.)\n     *\n     * @return  a hash code value for this object.\n     * @see     java.lang.Object#equals(java.lang.Object)\n     * @see     java.lang.System#identityHashCode\n     */\n    @HotSpotIntrinsicCandidate\n    public native int hashCode();\n\n    /**\n     * Indicates whether some other object is \"equal to\" this one.\n     * <p>\n     * The {@code equals} method implements an equivalence relation\n     * on non-null object references:\n     * <ul>\n     * <li>It is <i>reflexive</i>: for any non-null reference value\n     *     {@code x}, {@code x.equals(x)} should return\n     *     {@code true}.\n     * <li>It is <i>symmetric</i>: for any non-null reference values\n     *     {@code x} and {@code y}, {@code x.equals(y)}\n     *     should return {@code true} if and only if\n     *     {@code y.equals(x)} returns {@code true}.\n     * <li>It is <i>transitive</i>: for any non-null reference values\n     *     {@code x}, {@code y}, and {@code z}, if\n     *     {@code x.equals(y)} returns {@code true} and\n     *     {@code y.equals(z)} returns {@code true}, then\n     *     {@code x.equals(z)} should return {@code true}.\n     * <li>It is <i>consistent</i>: for any non-null reference values\n     *     {@code x} and {@code y}, multiple invocations of\n     *     {@code x.equals(y)} consistently return {@code true}\n     *     or consistently return {@code false}, provided no\n     *     information used in {@code equals} comparisons on the\n     *     objects is modified.\n     * <li>For any non-null reference value {@code x},\n     *     {@code x.equals(null)} should return {@code false}.\n     * </ul>\n     * <p>\n     * The {@code equals} method for class {@code Object} implements\n     * the most discriminating possible equivalence relation on objects;\n     * that is, for any non-null reference values {@code x} and\n     * {@code y}, this method returns {@code true} if and only\n     * if {@code x} and {@code y} refer to the same object\n     * ({@code x == y} has the value {@code true}).\n     * <p>\n     * Note that it is generally necessary to override the {@code hashCode}\n     * method whenever this method is overridden, so as to maintain the\n     * general contract for the {@code hashCode} method, which states\n     * that equal objects must have equal hash codes.\n     *\n     * @param   obj   the reference object with which to compare.\n     * @return  {@code true} if this object is the same as the obj\n     *          argument; {@code false} otherwise.\n     * @see     #hashCode()\n     * @see     java.util.HashMap\n     */\n    public boolean equals(Object obj) {\n        return (this == obj);\n    }\n\n    /**\n     * Creates and returns a copy of this object.  The precise meaning\n     * of \"copy\" may depend on the class of the object. The general\n     * intent is that, for any object {@code x}, the expression:\n     * <blockquote>\n     * <pre>\n     * x.clone() != x</pre></blockquote>\n     * will be true, and that the expression:\n     * <blockquote>\n     * <pre>\n     * x.clone().getClass() == x.getClass()</pre></blockquote>\n     * will be {@code true}, but these are not absolute requirements.\n     * While it is typically the case that:\n     * <blockquote>\n     * <pre>\n     * x.clone().equals(x)</pre></blockquote>\n     * will be {@code true}, this is not an absolute requirement.\n     * <p>\n     * By convention, the returned object should be obtained by calling\n     * {@code super.clone}.  If a class and all of its superclasses (except\n     * {@code Object}) obey this convention, it will be the case that\n     * {@code x.clone().getClass() == x.getClass()}.\n     * <p>\n     * By convention, the object returned by this method should be independent\n     * of this object (which is being cloned).  To achieve this independence,\n     * it may be necessary to modify one or more fields of the object returned\n     * by {@code super.clone} before returning it.  Typically, this means\n     * copying any mutable objects that comprise the internal \"deep structure\"\n     * of the object being cloned and replacing the references to these\n     * objects with references to the copies.  If a class contains only\n     * primitive fields or references to immutable objects, then it is usually\n     * the case that no fields in the object returned by {@code super.clone}\n     * need to be modified.\n     * <p>\n     * The method {@code clone} for class {@code Object} performs a\n     * specific cloning operation. First, if the class of this object does\n     * not implement the interface {@code Cloneable}, then a\n     * {@code CloneNotSupportedException} is thrown. Note that all arrays\n     * are considered to implement the interface {@code Cloneable} and that\n     * the return type of the {@code clone} method of an array type {@code T[]}\n     * is {@code T[]} where T is any reference or primitive type.\n     * Otherwise, this method creates a new instance of the class of this\n     * object and initializes all its fields with exactly the contents of\n     * the corresponding fields of this object, as if by assignment; the\n     * contents of the fields are not themselves cloned. Thus, this method\n     * performs a \"shallow copy\" of this object, not a \"deep copy\" operation.\n     * <p>\n     * The class {@code Object} does not itself implement the interface\n     * {@code Cloneable}, so calling the {@code clone} method on an object\n     * whose class is {@code Object} will result in throwing an\n     * exception at run time.\n     *\n     * @return     a clone of this instance.\n     * @throws  CloneNotSupportedException  if the object's class does not\n     *               support the {@code Cloneable} interface. Subclasses\n     *               that override the {@code clone} method can also\n     *               throw this exception to indicate that an instance cannot\n     *               be cloned.\n     * @see java.lang.Cloneable\n     */\n    @HotSpotIntrinsicCandidate\n    protected native Object clone() throws CloneNotSupportedException;\n\n    /**\n     * Returns a string representation of the object. In general, the\n     * {@code toString} method returns a string that\n     * \"textually represents\" this object. The result should\n     * be a concise but informative representation that is easy for a\n     * person to read.\n     * It is recommended that all subclasses override this method.\n     * <p>\n     * The {@code toString} method for class {@code Object}\n     * returns a string consisting of the name of the class of which the\n     * object is an instance, the at-sign character `{@code @}', and\n     * the unsigned hexadecimal representation of the hash code of the\n     * object. In other words, this method returns a string equal to the\n     * value of:\n     * <blockquote>\n     * <pre>\n     * getClass().getName() + '@' + Integer.toHexString(hashCode())\n     * </pre></blockquote>\n     *\n     * @return  a string representation of the object.\n     */\n    public String toString() {\n        return getClass().getName() + \"@\" + Integer.toHexString(hashCode());\n    }\n\n    /**\n     * Wakes up a single thread that is waiting on this object's\n     * monitor. If any threads are waiting on this object, one of them\n     * is chosen to be awakened. The choice is arbitrary and occurs at\n     * the discretion of the implementation. A thread waits on an object's\n     * monitor by calling one of the {@code wait} methods.\n     * <p>\n     * The awakened thread will not be able to proceed until the current\n     * thread relinquishes the lock on this object. The awakened thread will\n     * compete in the usual manner with any other threads that might be\n     * actively competing to synchronize on this object; for example, the\n     * awakened thread enjoys no reliable privilege or disadvantage in being\n     * the next thread to lock this object.\n     * <p>\n     * This method should only be called by a thread that is the owner\n     * of this object's monitor. A thread becomes the owner of the\n     * object's monitor in one of three ways:\n     * <ul>\n     * <li>By executing a synchronized instance method of that object.\n     * <li>By executing the body of a {@code synchronized} statement\n     *     that synchronizes on the object.\n     * <li>For objects of type {@code Class,} by executing a\n     *     synchronized static method of that class.\n     * </ul>\n     * <p>\n     * Only one thread at a time can own an object's monitor.\n     *\n     * @throws  IllegalMonitorStateException  if the current thread is not\n     *               the owner of this object's monitor.\n     * @see        java.lang.Object#notifyAll()\n     * @see        java.lang.Object#wait()\n     */\n    @HotSpotIntrinsicCandidate\n    public final native void notify();\n\n    /**\n     * Wakes up all threads that are waiting on this object's monitor. A\n     * thread waits on an object's monitor by calling one of the\n     * {@code wait} methods.\n     * <p>\n     * The awakened threads will not be able to proceed until the current\n     * thread relinquishes the lock on this object. The awakened threads\n     * will compete in the usual manner with any other threads that might\n     * be actively competing to synchronize on this object; for example,\n     * the awakened threads enjoy no reliable privilege or disadvantage in\n     * being the next thread to lock this object.\n     * <p>\n     * This method should only be called by a thread that is the owner\n     * of this object's monitor. See the {@code notify} method for a\n     * description of the ways in which a thread can become the owner of\n     * a monitor.\n     *\n     * @throws  IllegalMonitorStateException  if the current thread is not\n     *               the owner of this object's monitor.\n     * @see        java.lang.Object#notify()\n     * @see        java.lang.Object#wait()\n     */\n    @HotSpotIntrinsicCandidate\n    public final native void notifyAll();\n\n    /**\n     * Causes the current thread to wait until it is awakened, typically\n     * by being <em>notified</em> or <em>interrupted</em>.\n     * <p>\n     * In all respects, this method behaves as if {@code wait(0L, 0)}\n     * had been called. See the specification of the {@link #wait(long, int)} method\n     * for details.\n     *\n     * @throws IllegalMonitorStateException if the current thread is not\n     *         the owner of the object's monitor\n     * @throws InterruptedException if any thread interrupted the current thread before or\n     *         while the current thread was waiting. The <em>interrupted status</em> of the\n     *         current thread is cleared when this exception is thrown.\n     * @see    #notify()\n     * @see    #notifyAll()\n     * @see    #wait(long)\n     * @see    #wait(long, int)\n     */\n    public final void wait() throws InterruptedException {\n        wait(0L);\n    }\n\n    /**\n     * Causes the current thread to wait until it is awakened, typically\n     * by being <em>notified</em> or <em>interrupted</em>, or until a\n     * certain amount of real time has elapsed.\n     * <p>\n     * In all respects, this method behaves as if {@code wait(timeoutMillis, 0)}\n     * had been called. See the specification of the {@link #wait(long, int)} method\n     * for details.\n     *\n     * @param  timeoutMillis the maximum time to wait, in milliseconds\n     * @throws IllegalArgumentException if {@code timeoutMillis} is negative\n     * @throws IllegalMonitorStateException if the current thread is not\n     *         the owner of the object's monitor\n     * @throws InterruptedException if any thread interrupted the current thread before or\n     *         while the current thread was waiting. The <em>interrupted status</em> of the\n     *         current thread is cleared when this exception is thrown.\n     * @see    #notify()\n     * @see    #notifyAll()\n     * @see    #wait()\n     * @see    #wait(long, int)\n     */\n    public final native void wait(long timeoutMillis) throws InterruptedException;\n\n    /**\n     * Causes the current thread to wait until it is awakened, typically\n     * by being <em>notified</em> or <em>interrupted</em>, or until a\n     * certain amount of real time has elapsed.\n     * <p>\n     * The current thread must own this object's monitor lock. See the\n     * {@link #notify notify} method for a description of the ways in which\n     * a thread can become the owner of a monitor lock.\n     * <p>\n     * This method causes the current thread (referred to here as <var>T</var>) to\n     * place itself in the wait set for this object and then to relinquish any\n     * and all synchronization claims on this object. Note that only the locks\n     * on this object are relinquished; any other objects on which the current\n     * thread may be synchronized remain locked while the thread waits.\n     * <p>\n     * Thread <var>T</var> then becomes disabled for thread scheduling purposes\n     * and lies dormant until one of the following occurs:\n     * <ul>\n     * <li>Some other thread invokes the {@code notify} method for this\n     * object and thread <var>T</var> happens to be arbitrarily chosen as\n     * the thread to be awakened.\n     * <li>Some other thread invokes the {@code notifyAll} method for this\n     * object.\n     * <li>Some other thread {@linkplain Thread#interrupt() interrupts}\n     * thread <var>T</var>.\n     * <li>The specified amount of real time has elapsed, more or less.\n     * The amount of real time, in nanoseconds, is given by the expression\n     * {@code 1000000 * timeoutMillis + nanos}. If {@code timeoutMillis} and {@code nanos}\n     * are both zero, then real time is not taken into consideration and the\n     * thread waits until awakened by one of the other causes.\n     * <li>Thread <var>T</var> is awakened spuriously. (See below.)\n     * </ul>\n     * <p>\n     * The thread <var>T</var> is then removed from the wait set for this\n     * object and re-enabled for thread scheduling. It competes in the\n     * usual manner with other threads for the right to synchronize on the\n     * object; once it has regained control of the object, all its\n     * synchronization claims on the object are restored to the status quo\n     * ante - that is, to the situation as of the time that the {@code wait}\n     * method was invoked. Thread <var>T</var> then returns from the\n     * invocation of the {@code wait} method. Thus, on return from the\n     * {@code wait} method, the synchronization state of the object and of\n     * thread {@code T} is exactly as it was when the {@code wait} method\n     * was invoked.\n     * <p>\n     * A thread can wake up without being notified, interrupted, or timing out, a\n     * so-called <em>spurious wakeup</em>.  While this will rarely occur in practice,\n     * applications must guard against it by testing for the condition that should\n     * have caused the thread to be awakened, and continuing to wait if the condition\n     * is not satisfied. See the example below.\n     * <p>\n     * For more information on this topic, see section 14.2,\n     * \"Condition Queues,\" in Brian Goetz and others' <em>Java Concurrency\n     * in Practice</em> (Addison-Wesley, 2006) or Item 69 in Joshua\n     * Bloch's <em>Effective Java, Second Edition</em> (Addison-Wesley,\n     * 2008).\n     * <p>\n     * If the current thread is {@linkplain java.lang.Thread#interrupt() interrupted}\n     * by any thread before or while it is waiting, then an {@code InterruptedException}\n     * is thrown.  The <em>interrupted status</em> of the current thread is cleared when\n     * this exception is thrown. This exception is not thrown until the lock status of\n     * this object has been restored as described above.\n     *\n     * @apiNote\n     * The recommended approach to waiting is to check the condition being awaited in\n     * a {@code while} loop around the call to {@code wait}, as shown in the example\n     * below. Among other things, this approach avoids problems that can be caused\n     * by spurious wakeups.\n     *\n     * <pre>{@code\n     *     synchronized (obj) {\n     *         while (<condition does not hold> and <timeout not exceeded>) {\n     *             long timeoutMillis = ... ; // recompute timeout values\n     *             int nanos = ... ;\n     *             obj.wait(timeoutMillis, nanos);\n     *         }\n     *         ... // Perform action appropriate to condition or timeout\n     *     }\n     * }</pre>\n     *\n     * @param  timeoutMillis the maximum time to wait, in milliseconds\n     * @param  nanos   additional time, in nanoseconds, in the range range 0-999999 inclusive\n     * @throws IllegalArgumentException if {@code timeoutMillis} is negative,\n     *         or if the value of {@code nanos} is out of range\n     * @throws IllegalMonitorStateException if the current thread is not\n     *         the owner of the object's monitor\n     * @throws InterruptedException if any thread interrupted the current thread before or\n     *         while the current thread was waiting. The <em>interrupted status</em> of the\n     *         current thread is cleared when this exception is thrown.\n     * @see    #notify()\n     * @see    #notifyAll()\n     * @see    #wait()\n     * @see    #wait(long)\n     */\n    public final void wait(long timeoutMillis, int nanos) throws InterruptedException {\n        if (timeoutMillis < 0) {\n            throw new IllegalArgumentException(\"timeoutMillis value is negative\");\n        }\n\n        if (nanos < 0 || nanos > 999999) {\n            throw new IllegalArgumentException(\n                                \"nanosecond timeout value out of range\");\n        }\n\n        if (nanos > 0) {\n            timeoutMillis++;\n        }\n\n        wait(timeoutMillis);\n    }\n\n    /**\n     * Called by the garbage collector on an object when garbage collection\n     * determines that there are no more references to the object.\n     * A subclass overrides the {@code finalize} method to dispose of\n     * system resources or to perform other cleanup.\n     * <p>\n     * The general contract of {@code finalize} is that it is invoked\n     * if and when the Java&trade; virtual\n     * machine has determined that there is no longer any\n     * means by which this object can be accessed by any thread that has\n     * not yet died, except as a result of an action taken by the\n     * finalization of some other object or class which is ready to be\n     * finalized. The {@code finalize} method may take any action, including\n     * making this object available again to other threads; the usual purpose\n     * of {@code finalize}, however, is to perform cleanup actions before\n     * the object is irrevocably discarded. For example, the finalize method\n     * for an object that represents an input/output connection might perform\n     * explicit I/O transactions to break the connection before the object is\n     * permanently discarded.\n     * <p>\n     * The {@code finalize} method of class {@code Object} performs no\n     * special action; it simply returns normally. Subclasses of\n     * {@code Object} may override this definition.\n     * <p>\n     * The Java programming language does not guarantee which thread will\n     * invoke the {@code finalize} method for any given object. It is\n     * guaranteed, however, that the thread that invokes finalize will not\n     * be holding any user-visible synchronization locks when finalize is\n     * invoked. If an uncaught exception is thrown by the finalize method,\n     * the exception is ignored and finalization of that object terminates.\n     * <p>\n     * After the {@code finalize} method has been invoked for an object, no\n     * further action is taken until the Java virtual machine has again\n     * determined that there is no longer any means by which this object can\n     * be accessed by any thread that has not yet died, including possible\n     * actions by other objects or classes which are ready to be finalized,\n     * at which point the object may be discarded.\n     * <p>\n     * The {@code finalize} method is never invoked more than once by a Java\n     * virtual machine for any given object.\n     * <p>\n     * Any exception thrown by the {@code finalize} method causes\n     * the finalization of this object to be halted, but is otherwise\n     * ignored.\n     *\n     * @apiNote\n     * Classes that embed non-heap resources have many options\n     * for cleanup of those resources. The class must ensure that the\n     * lifetime of each instance is longer than that of any resource it embeds.\n     * {@link java.lang.ref.Reference#reachabilityFence} can be used to ensure that\n     * objects remain reachable while resources embedded in the object are in use.\n     * <p>\n     * A subclass should avoid overriding the {@code finalize} method\n     * unless the subclass embeds non-heap resources that must be cleaned up\n     * before the instance is collected.\n     * Finalizer invocations are not automatically chained, unlike constructors.\n     * If a subclass overrides {@code finalize} it must invoke the superclass\n     * finalizer explicitly.\n     * To guard against exceptions prematurely terminating the finalize chain,\n     * the subclass should use a {@code try-finally} block to ensure\n     * {@code super.finalize()} is always invoked. For example,\n     * <pre>{@code      @Override\n     *     protected void finalize() throws Throwable {\n     *         try {\n     *             ... // cleanup subclass state\n     *         } finally {\n     *             super.finalize();\n     *         }\n     *     }\n     * }</pre>\n     *\n     * @deprecated The finalization mechanism is inherently problematic.\n     * Finalization can lead to performance issues, deadlocks, and hangs.\n     * Errors in finalizers can lead to resource leaks; there is no way to cancel\n     * finalization if it is no longer necessary; and no ordering is specified\n     * among calls to {@code finalize} methods of different objects.\n     * Furthermore, there are no guarantees regarding the timing of finalization.\n     * The {@code finalize} method might be called on a finalizable object\n     * only after an indefinite delay, if at all.\n     *\n     * Classes whose instances hold non-heap resources should provide a method\n     * to enable explicit release of those resources, and they should also\n     * implement {@link AutoCloseable} if appropriate.\n     * The {@link java.lang.ref.Cleaner} and {@link java.lang.ref.PhantomReference}\n     * provide more flexible and efficient ways to release resources when an object\n     * becomes unreachable.\n     *\n     * @throws Throwable the {@code Exception} raised by this method\n     * @see java.lang.ref.WeakReference\n     * @see java.lang.ref.PhantomReference\n     * @jls 12.6 Finalization of Class Instances\n     */\n    @Deprecated(since=\"9\")\n    protected void finalize() throws Throwable { }\n}\n"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didClose: JsonRpcNotificationMessage(2.0, textDocument/didClose, {"textDocument":{"uri":"file:///c%3A/Users/ahmed/git/BST_C-_JavaScript_Scala/MainProjects/scala-project/.metals/readonly/dependencies/src.zip/java.base/java/lang/Object.java"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled request received: shutdown: JsonRpcRequestMessage(2.0, ♨121, shutdown, null})[0m
